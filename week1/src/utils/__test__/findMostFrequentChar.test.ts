import { trincateString } from '../stringUtil';
import { findMostFrequentChar } from '../week2';

describe('함수에 인자를 주어 올바른 반환값을 받는다.', () => {
  // Given
  // tc => test_case
  // tc:[테스트 입력, 테스트 예상 결과];
  // 테스트 예상 결과는 Array에 정답이 될 수 있는 모든 단일문자를 담아서 반환함
  const tc: Array<[string, Array<string>]> = [
    ['', []],
    ['a', ['a']],
    ['abac', ['a']],
    ['aabb', ['a', 'b']],
    ['AAAa', ['A']],
    ['abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g']],
    ['qqqㄱㄱㄱ', ['q', 'ㄱ']],
    ['12341abㄱ', ['1']],
    [
      'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
      ['a'],
    ],
    [
      'abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab',
      ['a', 'b'],
    ],
    [
      'dabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdcdabcabcabcdabdcabcabdcabcabcabdcabcabcabcabdcabcabcdabcabcabcabcabcabdcabcabcabcabcadbcabcabcabcabcabdcabcabcabcabcdabcabcabcadbcabdc',
      ['a', 'b', 'c'],
    ],
    ['                          ', []],
    ['박민규', ['박', '민', '규']],
    ['Pneumonoultramicroscopicsilicovolcanoconiosis', ['o']],
    ['hippopotomonstrosesquippedaliophobia', ['o']],
    [
      '[KDC] 시니어로 가는 지름길, 프론트엔드 실무 스킬(TDD, CI/CD, 성능 최적화)',
      ['D'],
    ],
    ['aaabbbbcccc', ['b', 'c']],
    ['\n\t\t\n', []],
  ];

  // When
  const ans = tc.map((e) => findMostFrequentChar(e[0]));

  // Then
  tc.forEach((t, i) => {
    it(`함수에 "${trincateString(t[0])}" 를 주면, 그에 따라 올바른 값 [${
      t[1]
    }] 을 반환한다.`, () => {
      expect(t[1]).toEqual(ans[i]);
    });
  });
});
