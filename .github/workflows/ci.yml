name: ci

on: [push]

jobs:
  # 의존성 설치
  install-dependencies:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
      - name: Cheeckout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # node_modules가 cache 된 게 있는지 확인
      - name: Restore node_modules from Cache
        id: restore-node-modules
        uses: actions/cache@v4
        with:
          path: week3/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('week3/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node

      - name: Install Dependencies
        # restore-node-modules의 outputs cache가 없으면 실행
        if: steps.restore-node-nodules.outputs.cache-hit != 'true'
        run: npm install
        working-directory: week3

  # lint 확인 및 수정
  lint:
    runs-on: ubuntu-latest
    needs: install-dependencies # install-dependencies 단계가 실행되어야 함
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    steps:
      - name: Cheeckout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # node_modules가 cache 된 게 있는지 확인
      - name: Restore node_modules from Cache
        id: restore-node-modules
        uses: actions/cache@v4
        with:
          path: week3/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('week3/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node

      - name: Install Dependencies
        # restore-node-modules의 outputs cache가 없으면 실행
        if: steps.restore-node-nodules.outputs.cache-hit != 'true'
        run: npm install
        working-directory: week3

      - name: Run Lint
        run: npm run lint
        working-directory: week3

  # 테스트 검증
  test:
    runs-on: ubuntu-latest
    needs: install-dependencies # install-dependencies 단계가 실행되어야 함
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    steps:
      - name: Cheeckout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # node_modules가 cache 된 게 있는지 확인
      - name: Restore node_modules from Cache
        id: restore-node-modules
        uses: actions/cache@v4
        with:
          path: week3/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('week3/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node

      - name: Install Dependencies
        # restore-node-modules의 outputs cache가 없으면 실행
        if: steps.restore-node-nodules.outputs.cache-hit != 'true'
        run: npm install
        working-directory: week3

      - name: Run Test
        run: npm run test
        working-directory: week3

  # React Build
  build:
    runs-on: ubuntu-latest
    needs: [lint, test] # lint, test 단계가 모두 실행되어야 함
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    steps:
      - name: Cheeckout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # node_modules가 cache 된 게 있는지 확인
      - name: Restore node_modules from Cache
        id: restore-node-modules
        uses: actions/cache@v4
        with:
          path: week3/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('week3/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node

      - name: Install Dependencies
        # restore-node-modules의 outputs cache가 없으면 실행
        if: steps.restore-node-nodules.outputs.cache-hit != 'true'
        run: npm install
        working-directory: week3

      - name: Run Build
        run: npm run build
        working-directory: week3
